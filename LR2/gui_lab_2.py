# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_Lab2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QCloseEvent

from library import Library, SortBy, SearchRemoveBy
from book import Book
from controller import Controller
from typing import NoReturn


class MyWindow(QtWidgets.QMainWindow):

    @property
    def data_controller(self):
        return self._data_controller

    def __init__(self, data_controller: Controller, parent=None):
        QtWidgets.QWidget.__init__(self, parent)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icons/bimer.jpg"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.setWindowIcon(icon)
        self.resize(300, 100)
        self._data_controller = data_controller

    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(
            self,
            "Подтверждение закрытия окна",
            "Вы действительно хотите закрыть окно?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Save,
            QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            event.accept()
            QtWidgets.QWidget.closeEvent(self, event)
        elif result == QtWidgets.QMessageBox.Save:
            self._data_controller.save_library()
            event.accept()
            QtWidgets.QWidget.closeEvent(self, event)
        else:
            event.ignore()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1204, 726)
        MainWindow.setStyleSheet("background-color: rgb(255, 225, 230);\n"
"background-color: rgb(255, 205, 206);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.table_page = QtWidgets.QTableWidget(self.centralwidget)
        self.table_page.setEnabled(True)
        self.table_page.setGeometry(QtCore.QRect(0, 0, 1231, 631))
        self.table_page.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.table_page.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.table_page.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_page.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table_page.setAutoScroll(True)
        self.table_page.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.table_page.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerItem)
        self.table_page.setGridStyle(QtCore.Qt.SolidLine)
        self.table_page.setRowCount(0)
        self.table_page.setColumnCount(6)
        self.table_page.setObjectName("table_page")
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_page.setHorizontalHeaderItem(5, item)
        self.table_page.horizontalHeader().setDefaultSectionSize(200)
        self.table_page.horizontalHeader().setMinimumSectionSize(40)
        self.table_page.verticalHeader().setDefaultSectionSize(60)
        self.table_page.verticalHeader().setMinimumSectionSize(50)
        self.first_page_button = QtWidgets.QPushButton(self.centralwidget)
        self.first_page_button.setGeometry(QtCore.QRect(500, 630, 51, 41))
        self.first_page_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.first_page_button.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.first_page_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icons/doubleL.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.first_page_button.setIcon(icon)
        self.first_page_button.setObjectName("first_page_button")
        self.prev_page_button = QtWidgets.QPushButton(self.centralwidget)
        self.prev_page_button.setGeometry(QtCore.QRect(560, 630, 41, 41))
        self.prev_page_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.prev_page_button.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.prev_page_button.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./icons/left.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.prev_page_button.setIcon(icon1)
        self.prev_page_button.setObjectName("prev_page_button")
        self.next_page_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_page_button.setGeometry(QtCore.QRect(660, 630, 41, 41))
        self.next_page_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.next_page_button.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.next_page_button.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("./icons/right.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.next_page_button.setIcon(icon2)
        self.next_page_button.setObjectName("next_page_button")
        self.last_page_button = QtWidgets.QPushButton(self.centralwidget)
        self.last_page_button.setGeometry(QtCore.QRect(710, 630, 51, 41))
        self.last_page_button.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.last_page_button.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.last_page_button.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./icons/doubleR.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.last_page_button.setIcon(icon3)
        self.last_page_button.setObjectName("last_page_button")
        self.update_table = QtWidgets.QPushButton(self.centralwidget)
        self.update_table.setGeometry(QtCore.QRect(610, 630, 41, 41))
        self.update_table.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.update_table.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.update_table.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./icons/kisspng-computer-icons-encapsulated-postscript-update-icon-5b3dc17314f424.1369092815307738750858.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.update_table.setIcon(icon4)
        self.update_table.setIconSize(QtCore.QSize(24, 24))
        self.update_table.setObjectName("update_table")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1204, 30))
        self.menubar.setObjectName("menubar")
        self.file_menu = QtWidgets.QMenu(self.menubar)
        self.file_menu.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.file_menu.setObjectName("file_menu")
        self.sort_menu = QtWidgets.QMenu(self.menubar)
        self.sort_menu.setEnabled(True)
        self.sort_menu.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.sort_menu.setTabletTracking(False)
        self.sort_menu.setFocusPolicy(QtCore.Qt.NoFocus)
        self.sort_menu.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.sort_menu.setAcceptDrops(True)
        self.sort_menu.setTearOffEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icons/sort-2_icon-icons.com_69583.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.sort_menu.setIcon(icon5)
        self.sort_menu.setSeparatorsCollapsible(False)
        self.sort_menu.setToolTipsVisible(False)
        self.sort_menu.setObjectName("sort_menu")
        self.table_menu = QtWidgets.QMenu(self.menubar)
        self.table_menu.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.table_menu.setTearOffEnabled(True)
        self.table_menu.setObjectName("table_menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.sort_by_name_act = QtWidgets.QAction(MainWindow)
        self.sort_by_name_act.setCheckable(True)
        self.sort_by_name_act.setChecked(True)
        self.sort_by_name_act.setObjectName("sort_by_name_act")
        self.sort_by_publishing_house_act = QtWidgets.QAction(MainWindow)
        self.sort_by_publishing_house_act.setCheckable(True)
        self.sort_by_publishing_house_act.setObjectName("sort_by_publishing_house_act")
        self.sort_by_published_amount_act = QtWidgets.QAction(MainWindow)
        self.sort_by_published_amount_act.setCheckable(True)
        self.sort_by_published_amount_act.setObjectName("sort_by_published_amount_act")
        self.direct_sort_act = QtWidgets.QAction(MainWindow)
        self.direct_sort_act.setCheckable(True)
        self.direct_sort_act.setChecked(True)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("./icons/png-transparent-arrow-down-android-s-v-g-computer-icons-up-arrows-angle-text-triangle-thumbnail1-removebg-preview (1).png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        icon6.addPixmap(QtGui.QPixmap("../../.designer/backup/icons/png-transparent-arrow-down-android-s-v-g-computer-icons-up-arrows-angle-text-triangle-thumbnail1.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.direct_sort_act.setIcon(icon6)
        self.direct_sort_act.setObjectName("direct_sort_act")
        self.reverse_sort_act = QtWidgets.QAction(MainWindow)
        self.reverse_sort_act.setCheckable(True)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("./icons/png-transparent-arrow-down-android-s-v-g-computer-icons-up-arrows-angle-text-triangle-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap("../../.designer/backup/icons/png-transparent-arrow-down-android-s-v-g-computer-icons-up-arrows-angle-text-triangle-thumbnail.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.reverse_sort_act.setIcon(icon7)
        self.reverse_sort_act.setObjectName("reverse_sort_act")
        self.save_act = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("./icons/png-transparent-computer-icons-favicon-save-icon-miscellaneous-text-rectangle-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.save_act.setIcon(icon8)
        self.save_act.setObjectName("save_act")
        self.save_as_act = QtWidgets.QAction(MainWindow)
        self.save_as_act.setIcon(icon8)
        self.save_as_act.setObjectName("save_as_act")
        self.load_act = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("./icons/png-transparent-upload-icon-line-angle-symbol-font-upload-angle-symbol-mono-general-4-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.load_act.setIcon(icon9)
        self.load_act.setObjectName("load_act")
        self.find_books_act = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("./icons/png-transparent-computer-icons-magnifying-glass-magnifier-magnifying-glass-text-interface-magnifier-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.find_books_act.setIcon(icon12)
        self.find_books_act.setObjectName("find_books_act")
        self.delete_books_act = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("./icons/png-transparent-rubbish-bins-waste-paper-baskets-recycling-bin-computer-icons-trash-miscellaneous-recycling-logo-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.delete_books_act.setIcon(icon13)
        self.delete_books_act.setObjectName("delete_books_act")
        self.add_books_act = QtWidgets.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("./icons/png-transparent-computer-icons-add-logo-desktop-wallpaper-add-thumbnail-removebg-preview.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.add_books_act.setIcon(icon14)
        self.add_books_act.setObjectName("add_books_act")
        self.file_menu.addAction(self.save_act)
        self.file_menu.addSeparator()
        self.file_menu.addAction(self.save_as_act)
        self.file_menu.addSeparator()
        self.file_menu.addAction(self.load_act)
        self.sort_menu.addSeparator()
        self.sort_menu.addAction(self.sort_by_name_act)
        self.sort_menu.addSeparator()
        self.sort_menu.addAction(self.sort_by_publishing_house_act)
        self.sort_menu.addSeparator()
        self.sort_menu.addAction(self.sort_by_published_amount_act)
        self.sort_menu.addSeparator()
        self.sort_menu.addAction(self.direct_sort_act)
        self.sort_menu.addSeparator()
        self.sort_menu.addAction(self.reverse_sort_act)
        self.table_menu.addAction(self.find_books_act)
        self.table_menu.addSeparator()
        self.table_menu.addAction(self.delete_books_act)
        self.table_menu.addSeparator()
        self.table_menu.addAction(self.add_books_act)
        self.menubar.addAction(self.file_menu.menuAction())
        self.menubar.addAction(self.sort_menu.menuAction())
        self.menubar.addAction(self.table_menu.menuAction())

        MainWindow.data_controller.load_current_page(self)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.save_library()
        self.save_library_as()
        self.load_library()

        self.connect_page_changer()

        self.connect_sort(MainWindow)

        self.update_table.clicked.connect(lambda: MainWindow.data_controller.update_table(self))


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.table_page.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Название книги"))
        item = self.table_page.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Авторы"))
        item = self.table_page.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Издательство"))
        item = self.table_page.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Количество томов"))
        item = self.table_page.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Тираж"))
        item = self.table_page.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Выпущенно глав"))
        self.file_menu.setTitle(_translate("MainWindow", "Файл"))
        self.sort_menu.setTitle(_translate("MainWindow", "Сорт"))
        self.table_menu.setTitle(_translate("MainWindow", "Таблица"))
        self.sort_by_name_act.setText(_translate("MainWindow", "Название"))
        self.sort_by_publishing_house_act.setText(_translate("MainWindow", "Издательство"))
        self.sort_by_published_amount_act.setText(_translate("MainWindow", "Тираж"))
        self.direct_sort_act.setText(_translate("MainWindow", "А-Я"))
        self.reverse_sort_act.setText(_translate("MainWindow", "Я-А"))
        self.save_act.setText(_translate("MainWindow", "Сохранить"))
        self.save_as_act.setText(_translate("MainWindow", "Сохранить как..."))
        self.load_act.setText(_translate("MainWindow", "Загрузить"))
        self.find_books_act.setText(_translate("MainWindow", "Поиск книг"))
        self.delete_books_act.setText(_translate("MainWindow", "Удаление книг"))
        self.add_books_act.setText(_translate("MainWindow", "Добавление книг"))

    def connect_page_changer(self) -> NoReturn:
        self.next_page_button.clicked.connect(lambda: MainWindow.data_controller.load_next_page(self))
        self.prev_page_button.clicked.connect(lambda: MainWindow.data_controller.load_prev_page(self))
        self.first_page_button.clicked.connect(lambda: MainWindow.data_controller.load_first_page(self))
        self.last_page_button.clicked.connect(lambda: MainWindow.data_controller.load_last_page(self))

    def save_library(self) -> NoReturn:
        self.save_act.triggered.connect(lambda: MainWindow.data_controller.save_library())

    def save_library_as(self) -> NoReturn:
        pass
        # TODO Всплывающее окно

    def load_library(self) -> NoReturn:
        pass
        # TODO Всплывающее окно

    def connect_sort(self, MainWindow):
        self.sort_by_name_act.triggered.connect(
            lambda: MainWindow.data_controller.sort_lib(self, sort_by=SortBy.NAME_SORT))
        self.sort_by_publishing_house_act.triggered.connect(
            lambda: MainWindow.data_controller.sort_lib(self, sort_by=SortBy.PUBLISHING_HOUSE_SORT))
        self.sort_by_published_amount_act.triggered.connect(
            lambda: MainWindow.data_controller.sort_lib(self, sort_by=SortBy.PUBLISHED_AMOUNT_SORT))
        self.direct_sort_act.triggered.connect(
            lambda: MainWindow.data_controller.sort_lib(self, reverse_order=False))
        self.reverse_sort_act.triggered.connect(
            lambda: MainWindow.data_controller.sort_lib(self, reverse_order=True))


    # TODO поиск
    # TODO удаление
    # TODO добавление
    # TODO Изменить значок приложения


if __name__ == "__main__":
    import sys

    books = [
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
          published_amount=243, volumes=2),
        Book(authors=["Klim", "Vorona"], name="Методичка по разъебу КИА РЫЛО 3.0", publishing_house="Zaklepka & co.",
             published_amount=8, volumes=2),
        Book(authors=["Kulebyaka"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2),
        Book(authors=["Voitkus", "Ibrahimov Ilya"], name="Какиш в двух томах", publishing_house="IIT KAFEDRA",
             published_amount=243, volumes=2)
    ]
    lib = Library(books)
    lib.add_book({
            "authors": ["Славянка Слабая"],
            "name": "Оформил бы?",
            "published_amount": 28
    })
    lib.add_books([
            {
                    "authors": ["Славянка Слабая"],
                    "name": "Оформил бы?",
                    "published_amount": 28
            },
            {
                    "authors": ["Voitkus"],
                    "name": "Всё о мёде. Секретные методики оформелния НКВД",
                    "publishing_house": "Гульчитай",
                    "published_amount": 777
            },
            {"authors": ["Ibrahimov Ilya", "Ахмэд"],
             "name": "How to kill Zaklepka",
             "publishing_house": "Ich zet nein tue frein",
             "published_amount": 188, "volumes": 10
             }])
    data_controller = Controller(lib)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = MyWindow(data_controller=data_controller)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

